<CLASS>
   <KEYWORD> class </KEYWORD>
   <IDENTIFIER> Main </IDENTIFIER>
   <SYMBOL> { </SYMBOL>
   <classVarDec>
      <KEYWORD>static</KEYWORD>
      <KEYWORD>boolean</KEYWORD>
      <IDENTIFIER> test </IDENTIFIER>
      <SYMBOL> ; </SYMBOL>
   </classVarDec>
   <subroutineDec>
      <KEYWORD>function<KEYWORD/>
      <KEYWORD>void<KEYWORD/>
      <IDENTIFIER>main<IDENTIFIER/>
      <SYMBOL> ( </SYMBOL>
      <parameterList>
      </parameterList>
      <SYMBOL> ) </SYMBOL>
      <subroutineBody>
         <SYMBOL> { </SYMBOL/>
         <varDec>
            <SYMBOL>var </SYMBOL>
            <SYMBOL>SquareGame </SYMBOL>
            <IDENTIFIER>game </IDENTIFIER>
            <SYMBOL> ; </SYMBOL>
         </varDec>
         <statements>
            <letStatement>
               <SYMBOL> let </SYMBOL>
               <IDENTIFIER> game </IDENTIFIER>
               <SYMBOL> = </SYMBOL>
               <expression>
               </expression>
               <SYMBOL> ; </SYMBOL>
            </letStatement>
            <doStatement>
               <SYMBOL> do </SYMBOL>
               <SYMBOL> game </SYMBOL>
               <SYMBOL> . </SYMBOL>
               <SYMBOL> run </SYMBOL>
               <SYMBOL> ( </SYMBOL>
               <expressionList>
               </expressionList>
               <SYMBOL> ) </SYMBOL>
               <SYMBOL> ; </SYMBOL>
            </doStatement>
            <doStatement>
               <SYMBOL> do </SYMBOL>
               <SYMBOL> game </SYMBOL>
               <SYMBOL> . </SYMBOL>
               <SYMBOL> dispose </SYMBOL>
               <SYMBOL> ( </SYMBOL>
               <expressionList>
               </expressionList>
               <SYMBOL> ) </SYMBOL>
               <SYMBOL> ; </SYMBOL>
            </doStatement>
            <returnStatement>
               <SYMBOL> return </SYMBOL>
               <SYMBOL> ; </SYMBOL>
            </returnStatement>
         </statements>
         <SYMBOL> } </SYMBOL>
      </subroutineBody>
   </subroutineDec>
   <subroutineDec>
      <KEYWORD>function<KEYWORD/>
      <KEYWORD>void<KEYWORD/>
      <IDENTIFIER>more<IDENTIFIER/>
      <SYMBOL> ( </SYMBOL>
      <parameterList>
      </parameterList>
      <SYMBOL> ) </SYMBOL>
      <subroutineBody>
         <SYMBOL> { </SYMBOL/>
         <varDec>
            <SYMBOL>var </SYMBOL>
            <SYMBOL>int </SYMBOL>
            <IDENTIFIER>i </IDENTIFIER>
            <SYMBOL> , </SYMBOL>
            <IDENTIFIER>j </IDENTIFIER>
            <SYMBOL> ; </SYMBOL>
         </varDec>
         <varDec>
            <SYMBOL>var </SYMBOL>
            <SYMBOL>String </SYMBOL>
            <IDENTIFIER>s </IDENTIFIER>
            <SYMBOL> ; </SYMBOL>
         </varDec>
         <varDec>
            <SYMBOL>var </SYMBOL>
            <SYMBOL>Array </SYMBOL>
            <IDENTIFIER>a </IDENTIFIER>
            <SYMBOL> ; </SYMBOL>
         </varDec>
         <statements>
            <ifStatement>
               <KEYWORD> if </KEYWORD>
               <SYMBOL> ( </SYMBOL>
               <expression>
               </expression>
               <SYMBOL> ) </SYMBOL>
               <SYMBOL> { </SYMBOL>
               <SYMBOL> } </SYMBOL>
               <KEYWORD>else<KEYWORD/>
               <SYMBOL> { </SYMBOL>
               <SYMBOL> } </SYMBOL>
            </ifStatement>
            <returnStatement>
               <SYMBOL> return </SYMBOL>
               <SYMBOL> ; </SYMBOL>
            </returnStatement>
         </statements>
      </subroutineBody>
   </subroutineDec>
   <SYMBOL> } </SYMBOL>
</CLASS>
<SYMBOL> } </SYMBOL>
