<CLASS>
  <KEYWORD> class </KEYWORD>
  <IDENTIFIER> Main </IDENTIFIER>
  <SYMBOL> { </SYMBOL>
  <classVarDec>
    <KEYWORD> static </KEYWORD>
    <KEYWORD> boolean </KEYWORD>
    <IDENTIFIER> test </IDENTIFIER>
    <SYMBOL> ; </SYMBOL>
  </classVarDec>
  <subroutineDec>
    <KEYWORD> function </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> main </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <parameterList>
    </parameterList>
    <SYMBOL> ) </SYMBOL>
    <subroutineBody>
      <SYMBOL> { </SYMBOL>
      <varDec>
        <KEYWORD> var </KEYWORD>
        <IDENTIFIER> SquareGame </IDENTIFIER>
        <IDENTIFIER> game </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
      </varDec>
      <statements>
        <letStatement>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> game </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <expression>
            <term>
              <IDENTIFIER> SquareGame </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> new </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <expressionList>
              </expressionList>
              <SYMBOL> ) </SYMBOL>
            </term>
          </expression>
          <SYMBOL> ; </SYMBOL>
        </letStatement>
        <doStatement>
          <KEYWORD> do </KEYWORD>
          <IDENTIFIER> game </IDENTIFIER>
          <SYMBOL> . </SYMBOL>
          <IDENTIFIER> run </IDENTIFIER>
          <SYMBOL> ( </SYMBOL>
          <expressionList>
          </expressionList>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> ; </SYMBOL>
        </doStatement>
        <doStatement>
          <KEYWORD> do </KEYWORD>
          <IDENTIFIER> game </IDENTIFIER>
          <SYMBOL> . </SYMBOL>
          <IDENTIFIER> dispose </IDENTIFIER>
          <SYMBOL> ( </SYMBOL>
          <expressionList>
          </expressionList>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> ; </SYMBOL>
        </doStatement>
        <returnStatement>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </returnStatement>
      </statements>
      <SYMBOL> } </SYMBOL>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <KEYWORD> function </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> more </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <parameterList>
    </parameterList>
    <SYMBOL> ) </SYMBOL>
    <subroutineBody>
      <SYMBOL> { </SYMBOL>
      <varDec>
        <KEYWORD> var </KEYWORD>
        <KEYWORD> int </KEYWORD>
        <IDENTIFIER> i </IDENTIFIER>
        <SYMBOL> , </SYMBOL>
        <IDENTIFIER> j </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
        <KEYWORD> var </KEYWORD>
        <IDENTIFIER> Strng </IDENTIFIER>
        <IDENTIFIER> s </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
        <KEYWORD> var </KEYWORD>
        <IDENTIFIER> Array </IDENTIFIER>
        <IDENTIFIER> a </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
        <IDENTIFIER> f </IDENTIFIER>
        <SYMBOL> ( </SYMBOL>
        <expressionList>
          <IDENTIFIER> le </IDENTIFIER>
        </expressionList>
        <SYMBOL> ) </SYMBOL>
        <SYMBOL> { </SYMBOL>
        <expressionList>
          <letStatement>
            <KEYWORD> let </KEYWORD>
            <SYMBOL> = </SYMBOL>
            <expression>
              <term>
                <IDENTIFIER> trng </IDENTIFIER>
                <IDENTIFIER> contnt </IDENTIFIER>
                <SYMBOL> ; </SYMBOL>
              </letStatement>
              <letStatement>
                <KEYWORD> let </KEYWORD>
                <SYMBOL> = </SYMBOL>
                <expression>
                  <term>
                    <KEYWORD> null </KEYWORD>
                    <SYMBOL> ; </SYMBOL>
                  </letStatement>
                  <letStatement>
                    <KEYWORD> let </KEYWORD>
                    <SYMBOL> [ </SYMBOL>
                    <SYMBOL> ] </SYMBOL>
                    <SYMBOL> = </SYMBOL>
                    <expression>
                      <term>
                        <SYMBOL> [ </SYMBOL>
                        <SYMBOL> ] </SYMBOL>
                        <SYMBOL> ; </SYMBOL>
                      </letStatement>
                    </expressionList>
                    <SYMBOL> } </SYMBOL>
                    <IDENTIFIER> ele </IDENTIFIER>
                    <SYMBOL> { </SYMBOL>
                    <expressionList>
                      <letStatement>
                        <KEYWORD> let </KEYWORD>
                        <SYMBOL> = </SYMBOL>
                        <expression>
                          <term>
                            <SYMBOL> * </SYMBOL>
                            <SYMBOL> ( </SYMBOL>
                            <expressionList>
                              <SYMBOL> - </SYMBOL>
                            </expressionList>
                            <SYMBOL> ) </SYMBOL>
                          </term>
                        </expression>
                        <SYMBOL> ; </SYMBOL>
                      </letStatement>
                      <letStatement>
                        <KEYWORD> let </KEYWORD>
                        <SYMBOL> = </SYMBOL>
                        <expression>
                          <term>
                            <IDENTIFIER> / </IDENTIFIER>
                            <SYMBOL> ( </SYMBOL>
                            <expressionList>
                              <SYMBOL> - </SYMBOL>
                            </expressionList>
                            <SYMBOL> ) </SYMBOL>
                          </term>
                        </expression>
                        <SYMBOL> ; </SYMBOL>
                      </letStatement>
                      <letStatement>
                        <KEYWORD> let </KEYWORD>
                        <SYMBOL> = </SYMBOL>
                        <expression>
                          <term>
                            <SYMBOL> | </SYMBOL>
                            <SYMBOL> ; </SYMBOL>
                          </letStatement>
                        </expressionList>
                        <SYMBOL> } </SYMBOL>
                      </varDec>
                      <statements>
                        <returnStatement>
                          <KEYWORD> return </KEYWORD>
                          <SYMBOL> ; </SYMBOL>
                        </returnStatement>
                      </statements>
                      <SYMBOL> } </SYMBOL>
                    </subroutineBody>
                  </subroutineDec>
                </CLASS>
                <SYMBOL> } </SYMBOL>
