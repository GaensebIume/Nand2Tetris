<CLASS>
  <KEYWORD> class </KEYWORD>
  <IDENTIFIER> Main </IDENTIFIER>
  <SYMBOL> { </SYMBOL>
  <classVarDec>
    <KEYWORD> static </KEYWORD>
    <KEYWORD> boolean </KEYWORD>
    <IDENTIFIER> test </IDENTIFIER>
    <SYMBOL> ; </SYMBOL>
    <FUNCTION>
      <KEYWORD> function </KEYWORD>
      <VOID>
        <KEYWORD> void </KEYWORD>
        <IDENTIFIER> main </IDENTIFIER>
        <SYMBOL> ( </SYMBOL>
        <SYMBOL> ) </SYMBOL>
        <SYMBOL> { </SYMBOL>
        <varDec>
          <KEYWORD> var </KEYWORD>
          <IDENTIFIER> SquareGame </IDENTIFIER>
          <IDENTIFIER> game </IDENTIFIER>
          <SYMBOL> ; </SYMBOL>
          <letStatement>
            <KEYWORD> let </KEYWORD>
            <IDENTIFIER> game </IDENTIFIER>
            <SYMBOL> = </SYMBOL>
            <IDENTIFIER> SquareGame </IDENTIFIER>
            <SYMBOL> . </SYMBOL>
            <IDENTIFIER> new </IDENTIFIER>
            <SYMBOL> ( </SYMBOL>
            <SYMBOL> ) </SYMBOL>
            <SYMBOL> ; </SYMBOL>
            <doStatement>
              <KEYWORD> do </KEYWORD>
              <IDENTIFIER> game </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> run </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> ; </SYMBOL>
              <doStatement>
                <KEYWORD> do </KEYWORD>
                <IDENTIFIER> game </IDENTIFIER>
                <SYMBOL> . </SYMBOL>
                <IDENTIFIER> dispose </IDENTIFIER>
                <SYMBOL> ( </SYMBOL>
                <SYMBOL> ) </SYMBOL>
                <SYMBOL> ; </SYMBOL>
                <returnStatement>
                  <KEYWORD> return </KEYWORD>
                  <SYMBOL> ; </SYMBOL>
                  <SYMBOL> } </SYMBOL>
                  <FUNCTION>
                    <KEYWORD> function </KEYWORD>
                    <VOID>
                      <KEYWORD> void </KEYWORD>
                      <IDENTIFIER> more </IDENTIFIER>
                      <SYMBOL> ( </SYMBOL>
                      <SYMBOL> ) </SYMBOL>
                      <SYMBOL> { </SYMBOL>
                      <varDec>
                        <KEYWORD> var </KEYWORD>
                        <INT>
                          <KEYWORD> int </KEYWORD>
                          <IDENTIFIER> i </IDENTIFIER>
                          <SYMBOL> , </SYMBOL>
                          <IDENTIFIER> j </IDENTIFIER>
                          <SYMBOL> ; </SYMBOL>
                          <varDec>
                            <KEYWORD> var </KEYWORD>
                            <IDENTIFIER> String </IDENTIFIER>
                            <IDENTIFIER> s </IDENTIFIER>
                            <SYMBOL> ; </SYMBOL>
                            <varDec>
                              <KEYWORD> var </KEYWORD>
                              <IDENTIFIER> Array </IDENTIFIER>
                              <IDENTIFIER> a </IDENTIFIER>
                              <SYMBOL> ; </SYMBOL>
                              <ifStatement>
                                <KEYWORD> if </KEYWORD>
                                <SYMBOL> ( </SYMBOL>
                                <FALSE>
                                  <KEYWORD> false </KEYWORD>
                                  <SYMBOL> ) </SYMBOL>
                                  <SYMBOL> { </SYMBOL>
                                  <letStatement>
                                    <KEYWORD> let </KEYWORD>
                                    <IDENTIFIER> s </IDENTIFIER>
                                    <SYMBOL> = </SYMBOL>
                                    <SYMBOL> ; </SYMBOL>
                                    <letStatement>
                                      <KEYWORD> let </KEYWORD>
                                      <IDENTIFIER> s </IDENTIFIER>
                                      <SYMBOL> = </SYMBOL>
                                      <NULL>
                                        <KEYWORD> null </KEYWORD>
                                        <SYMBOL> ; </SYMBOL>
                                        <letStatement>
                                          <KEYWORD> let </KEYWORD>
                                          <IDENTIFIER> a </IDENTIFIER>
                                          <SYMBOL> [ </SYMBOL>
                                          <SYMBOL> ] </SYMBOL>
                                          <SYMBOL> = </SYMBOL>
                                          <IDENTIFIER> a </IDENTIFIER>
                                          <SYMBOL> [ </SYMBOL>
                                          <SYMBOL> ] </SYMBOL>
                                          <SYMBOL> ; </SYMBOL>
                                          <SYMBOL> } </SYMBOL>
                                          <ELSE>
                                            <KEYWORD> else </KEYWORD>
                                            <SYMBOL> { </SYMBOL>
                                            <letStatement>
                                              <KEYWORD> let </KEYWORD>
                                              <IDENTIFIER> i </IDENTIFIER>
                                              <SYMBOL> = </SYMBOL>
                                              <IDENTIFIER> i </IDENTIFIER>
                                              <SYMBOL> * </SYMBOL>
                                              <SYMBOL> ( </SYMBOL>
                                              <SYMBOL> - </SYMBOL>
                                              <IDENTIFIER> j </IDENTIFIER>
                                              <SYMBOL> ) </SYMBOL>
                                              <SYMBOL> ; </SYMBOL>
                                              <letStatement>
                                                <KEYWORD> let </KEYWORD>
                                                <IDENTIFIER> j </IDENTIFIER>
                                                <SYMBOL> = </SYMBOL>
                                                <IDENTIFIER> j </IDENTIFIER>
                                                <IDENTIFIER> / </IDENTIFIER>
                                                <SYMBOL> ( </SYMBOL>
                                                <SYMBOL> - </SYMBOL>
                                                <SYMBOL> ) </SYMBOL>
                                                <SYMBOL> ; </SYMBOL>
                                                <letStatement>
                                                  <KEYWORD> let </KEYWORD>
                                                  <IDENTIFIER> i </IDENTIFIER>
                                                  <SYMBOL> = </SYMBOL>
                                                  <IDENTIFIER> i </IDENTIFIER>
                                                  <SYMBOL> | </SYMBOL>
                                                  <IDENTIFIER> j </IDENTIFIER>
                                                  <SYMBOL> ; </SYMBOL>
                                                  <SYMBOL> } </SYMBOL>
                                                  <returnStatement>
                                                    <KEYWORD> return </KEYWORD>
                                                    <SYMBOL> ; </SYMBOL>
                                                    <SYMBOL> } </SYMBOL>
                                                    <SYMBOL> } </SYMBOL>
