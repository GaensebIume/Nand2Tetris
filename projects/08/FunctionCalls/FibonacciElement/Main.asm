
//function Main.fibonacci 0
@Main.fibonacci
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt                     
@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
M=-1
@jmpTonull0
D;JLT
@SP
A=M-1
M=0
(jmpTonull0)
@SP
AM=M-1
M=JLT
@SP
M=M+1
@SP
AM=M-1
M=JLT
@SP
M=M+1
@SP
M=M-1
A=M
D=M
A=A-1
M=JLT
//if-goto IF_TRUE
not a arithmetic command if-goto
//goto IF_FALSE(goto)
0;JMP
//label IF_TRUE          
@label
//push argument 0        
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//return
@LCL
D=M
@R5
M=D
@R5
D=M
@5
D=D-A
@R6
M=D
@SP
ADM=M-1
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R5
AMD=M-1
@THAT
M=D
@R5
AMD=M-1
@THIS
M=D
@R5
AMD=M-1
@ARG
M=D
@R5
AMD=M-1
@LCL
M=D
@R6
A=M
0;JMP
//label IF_FALSE         
@label
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//call Main.fibonacci 1  
@Main.fibonacci
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
A=M
@SP
D=A
A=M-D
@SP
A=M
@LCL
D=A(Main.fibonacci)
0;JMP
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//call Main.fibonacci 1  
@Main.fibonacci
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
A=M
@SP
D=A
A=M-D
@SP
A=M
@LCL
D=A(Main.fibonacci)
0;JMP
//add                    
@SP
M=M-1
A=M
D=M
A=A-1
M=D+M
//return
@LCL
D=M
@R5
M=D
@R5
D=M
@5
D=D-A
@R6
M=D
@SP
ADM=M-1
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R5
AMD=M-1
@THAT
M=D
@R5
AMD=M-1
@THIS
M=D
@R5
AMD=M-1
@ARG
M=D
@R5
AMD=M-1
@LCL
M=D
@R6
A=M
0;JMP